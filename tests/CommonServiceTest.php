<?php
use PHPUnit\Framework\TestCase;
use Pod\Common\Service\CommonService;
use Pod\Base\Service\BaseInfo;
use Pod\Base\Service\Exception\ValidationException;
use Pod\Base\Service\Exception\PodException;

final class CommonServiceTest extends TestCase {
//    public static $apiToken;
    public static $commonService;
    const TOKEN_ISSUER = 1;
    const API_TOKEN = '9dfc30b213f74c82b2e03053c338d58e';
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        # set serverType to SandBox or Production
        BaseInfo::initServerType(BaseInfo::SANDBOX_SERVER);
        $baseInfo = new BaseInfo();
        $baseInfo->setTokenIssuer(self::TOKEN_ISSUER);
        $baseInfo->setToken(self::API_TOKEN);
        self::$commonService = new CommonService($baseInfo);
    }

    public function testGetOttAllParameters()
    {
        $params = [
        'token'               => self::API_TOKEN
        ];
        try {
            $result = self::$commonService->getOtt($params);
            $this->assertFalse($result['hasError']);
         } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testGetOttRequiredParameters()
    {
        $params = [];
        try {
            $result = self::$commonService->getOtt($params);
            $this->assertFalse($result['hasError']);
         } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testGetGuildListAllParameters()
    {
        $params = [
            ## ============== Required Parameters  ====================
            'offset'        => 0,
            ## ============== Optional Parameters  ====================
            'token'         => self::API_TOKEN,
            'name'          => 'TOILETRIES_GUILD',
            'size'          => 10,
        ];
        try {
            $result = self::$commonService->getGuildList($params);
            $this->assertFalse($result['hasError']);
         } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testGetGuildListRequiredParameters()
    {
        $params = [
            ## ============== Required Parameters  ====================
            'offset'        => 0,
        ];
        try {
            $result = self::$commonService->getGuildList($params);
            $this->assertFalse($result['hasError']);
         } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testGetGuildListRequiredParametersError()
    {
        $params = [];
        try {
            self::$commonService->getGuildList($params);
        } catch (ValidationException $e) {

            $validation = $e->getErrorsAsArray();
            $this->assertNotEmpty($validation);
            $this->assertArrayHasKey('offset', $validation);
            $this->assertEquals('The property offset is required', $validation['offset'][0]);

            $result = $e->getResult();
            $this->assertEquals(887,$result['code']);
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testGetCurrencyListAllParameters()
    {
        $params = [
        'token'               => self::API_TOKEN
        ];
        try {
            $result = self::$commonService->getCurrencyList($params);
            $this->assertFalse($result['hasError']);
         } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testGetCurrencyListRequiredParameters()
    {
        $params = [];
        try {
            $result = self::$commonService->getCurrencyList($params);
            $this->assertFalse($result['hasError']);
         } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testAddTagTreeCategoryAllParameters()
    {
        $name = uniqid("TestTagCategory");
        $params = [
        ## ============== Required Parameters  ====================
            "name"          =>  $name,
        ## ============== Optional Parameters  ====================
        "apiToken"          => '4d3d6b85e2e844b0ade83cc2ec5b4c85',
        "desc"              => "Test_Case",
        'scVoucherHash'     => ["Voucher_Hash_1", "Voucher_Hash_2"],
        ];
        try {
            $result = self::$commonService->addTagTreeCategory($params);
            $this->assertFalse($result['hasError']);
            $this->assertEquals($name, $result['result']['name']);
         } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testAddTagTreeCategoryRequiredParameters()
    {
        $name = uniqid("TestTagCategory");
        $params = [
        ## ============== Required Parameters  ====================
            "name" => $name,
        ];
        try {
            $result = self::$commonService->addTagTreeCategory($params);
            $this->assertFalse($result['hasError']);
            $this->assertEquals($name, $result['result']['name']);
         } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testAddTagTreeCategoryRequiredParametersError()
    {
        $params = [];
        try {
            $result = self::$commonService->addTagTreeCategory($params);
         } catch (ValidationException $e) {
            $validation = $e->getErrorsAsArray();
            $result = $e->getResult();
            $this->assertNotEmpty($validation);
            $this->assertArrayHasKey('name', $validation);
            $this->assertEquals('The property name is required', $validation['name'][0]);
            $this->assertEquals(887,$result['code']);
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testGetTagTreeCategoryListAllParameters() {
        $params = [
        ## ============== Required Parameters  =================
            "offset" => 0,
            "size" => 10,
        ## ============== Optional Parameters  =================
            "id"                => 12,
            "apiToken"          => self::API_TOKEN,
            "name"              => "Tag Category 1",
            "query"             => "tag",
            'scVoucherHash'     => ["Voucher_Hash_1", "Voucher_Hash_2"],
        ];
        try {
            $result = self::$commonService->getTagTreeCategoryList($params);
            $this->assertFalse($result['hasError']);
        } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testGetTagTreeCategoryListRequiredParameters() {
        $params = [
            ## ============== Required Parameters  =================
            "offset" => 0,
            "size" => 10,
        ];
        try {
            $result = self::$commonService->getTagTreeCategoryList($params);
            $this->assertFalse($result['hasError']);
         } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testGetTagTreeCategoryListRequiredParametersError() {
        $params = [];
        try {
            self::$commonService->getTagTreeCategoryList($params);
         } catch (ValidationException $e) {

            $validation = $e->getErrorsAsArray();
            $this->assertNotEmpty($validation);
            $this->assertArrayHasKey('offset', $validation);
            $this->assertEquals('The property offset is required', $validation['offset'][0]);
            $this->assertArrayHasKey('size', $validation);
            $this->assertEquals('The property size is required', $validation['size'][0]);

            $result = $e->getResult();
            $this->assertEquals(887,$result['code']);
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testUpdateTagTreeCategoryAllParameters() {
        $updatedName = uniqid("TestTagCategory");
        $params = [
            ## ============== Required Parameters  =================
            'id'                => 521,
            ## ============== Optional Parameters  =================
            'apiToken'          => self::API_TOKEN,
            'enable'            => true,
            'name'              => $updatedName,
            'desc'              => 'Update Tag Tree Category Test Case',
            'scVoucherHash'     => ["Voucher_Hash_1", "Voucher_Hash_2"],
//            'scApiKey'          => '{Put service call Api Key}',
        ];
        try {
            $result = self::$commonService->updateTagTreeCategory($params);
            $this->assertFalse($result['hasError']);
            $this->assertEquals($updatedName, $result['result']['name']);
        } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testUpdateTagTreeCategoryRequiredParameters() {
        $updatedName = uniqid("TestTagCategory");
        $params = [
            ## ============== Required Parameters  =================
            'id'                => 521,
            ## ============== Optional Parameters  =================
            'name'              => $updatedName,
        ];
        try {
            $result = self::$commonService->updateTagTreeCategory($params);
            $this->assertFalse($result['hasError']);
            $this->assertEquals($updatedName, $result['result']['name']);
        } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testUpdateTagTreeCategoryRequiredParametersError() {
        $params = [];
        try {
            self::$commonService->updateTagTreeCategory($params);
        } catch (ValidationException $e) {

            $validation = $e->getErrorsAsArray();
            $this->assertNotEmpty($validation);
            $this->assertArrayHasKey('id', $validation);
            $this->assertEquals('The property id is required', $validation['id'][0]);

            $result = $e->getResult();
            $this->assertEquals(887,$result['code']);
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testAddTagTreeAllParameters() {
        $name = uniqid("TestTagTree");
        $params = [
            ## ============== Required Parameters  =================
            "name"              => $name,
            "categoryId"        => 521,
            ## ============== Optional Parameters  =================
            "parentId"          => 2296, # 2300 for level 2
            "apiToken"          => "4d3d6b85e2e844b0ade83cc2ec5b4c85",
            'scVoucherHash'     => ["Voucher_Hash_1", "Voucher_Hash_2"],
        ];
        try {
            $result = self::$commonService->addTagTree($params);
            $this->assertFalse($result['hasError']);
            $this->assertEquals($name, $result['result']['name']);
        } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testAddTagTreeRequiredParameters() {
        $name = uniqid("TestTagTree");
        $params = [
            ## ============== Required Parameters  =================
            "name"              => $name,
            "categoryId"        => 521,
            "parentId"          => 2296,
//            "apiToken"          => "4d3d6b85e2e844b0ade83cc2ec5b4c85",
        ];
        try {
            $result = self::$commonService->addTagTree($params);
            $this->assertFalse($result['hasError']);
            $this->assertEquals($name, $result['result']['name']);
        } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testAddTagTreeRequiredParametersError() {
        $params = [];
        try {
            self::$commonService->addTagTree($params);
        } catch (ValidationException $e) {

            $validation = $e->getErrorsAsArray();
            $this->assertNotEmpty($validation);

            $this->assertArrayHasKey('name', $validation);
            $this->assertEquals('The property name is required', $validation['name'][0]);

            $this->assertArrayHasKey('categoryId', $validation);
            $this->assertEquals('The property categoryId is required', $validation['categoryId'][0]);

            $result = $e->getResult();
            $this->assertEquals(887,$result['code']);
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testGetTagTreeListAllParameters() {
        $params1 = [
            ## ============== Required Parameters  =================
            "categoryId"        => 521,
            "levelCount"        => 2,
            "level"             => 1,
            ## ============== Optional Parameters  =================
            "apiToken"          => "4d3d6b85e2e844b0ade83cc2ec5b4c85",
//            'scVoucherHash'     => ["Voucher_Hash_1", "Voucher_Hash_2"],
        ];

        $params2 = [
            ## ============== Required Parameters  =================
            "categoryId"        => 521,
            "levelCount"        => 2,
            "parentId"          => 2296,
            ## ============== Optional Parameters  =================
            "apiToken"          => "4d3d6b85e2e844b0ade83cc2ec5b4c85",
//            'scVoucherHash'     => ["Voucher_Hash_1", "Voucher_Hash_2"],
        ];

        $params3 = [
            ## ============== Required Parameters  =================
            "id"                => 2296,
            ## ============== Optional Parameters  =================
            "apiToken"          => "4d3d6b85e2e844b0ade83cc2ec5b4c85",
//            'scVoucherHash'     => ["Voucher_Hash_1", "Voucher_Hash_2"],
        ];
        try {

            $result1 = self::$commonService->getTagTreeList($params1);
            $this->assertFalse($result1['hasError']);

            $result2 = self::$commonService->getTagTreeList($params2);
            $this->assertFalse($result2['hasError']);

            $result3 = self::$commonService->getTagTreeList($params3);
            $this->assertFalse($result3['hasError']);

        } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testGetTagTreeListRequiredParameters() {
        $requiredParams1 = [
            ## ============== Required Parameters  =================
            "categoryId"        => 521,
            "levelCount"        => 2,
            "level"             => 0,
        ];
        $requiredParams2 = [
            ## ============== Required Parameters  =================
            "categoryId"        => 521,
            "levelCount"        => 2,
            "parentId"          => 2296,
        ];
        $requiredParams3 = [
            ## ============== Required Parameters  =================
            "id"                => 2296,
        ];
        try {
            $result1 = self::$commonService->getTagTreeList($requiredParams1);
            $this->assertFalse($result1['hasError']);
            $result2 = self::$commonService->getTagTreeList($requiredParams2);
            $this->assertFalse($result2['hasError']);
            $result3 = self::$commonService->getTagTreeList($requiredParams3);
            $this->assertFalse($result3['hasError']);

        } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testGetTagTreeListRequiredParametersError() {
        $params = [];
        try {
            self::$commonService->getTagTreeList($params);
        } catch (ValidationException $e) {

            $validation = $e->getErrorsAsArray();
            $this->assertNotEmpty($validation);

            $this->assertArrayHasKey('id', $validation);
            $this->assertEquals('The property id is required', $validation['id'][0]);

            $this->assertArrayHasKey('levelCount', $validation);
            $this->assertEquals('The property levelCount is required', $validation['levelCount'][0]);

            $this->assertArrayHasKey('id', $validation);
            $this->assertEquals('The property id is required', $validation['id'][0]);

            $this->assertArrayHasKey('categoryId', $validation);
            $this->assertEquals('The property categoryId is required', $validation['categoryId'][0]);

            $this->assertArrayHasKey('level', $validation);
            $this->assertEquals('The property level is required', $validation['level'][0]);

            $this->assertArrayHasKey('parentId', $validation);
            $this->assertEquals('The property parentId is required', $validation['parentId'][0]);

            $this->assertArrayHasKey('oneOf', $validation);
            $this->assertEquals('Failed to match exactly one schema', $validation['oneOf'][0]);

            $result = $e->getResult();
            $this->assertEquals(887,$result['code']);
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testUpdateTagTreeAllParameters() {
        $updatedName = uniqid("TestTagTree");
        $params = [
            ## ============== Required Parameters  =================
            "id" => 2296,
            ## ============== Optional Parameters  =================
            "parentId" => 2354,
            "apiToken" => "4d3d6b85e2e844b0ade83cc2ec5b4c85",
            "enable" => true,
            "name" => $updatedName,
//            'scVoucherHash'     => ["Voucher_Hash_1", "Voucher_Hash_2"],
        ];
        try {
            $result = self::$commonService->updateTagTree($params);
            $this->assertFalse($result['hasError']);
            $this->assertEquals($updatedName, $result['result']['name']);
        } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testUpdateTagTreeRequiredParameters() {
        $updatedName = uniqid("TestTagTree");
        $params = [
            ## ============== Required Parameters  =================
            "id"        => 2296,
            ## ============== Optional Parameters  =================
            "name"      => $updatedName,
//            "parentId"  => 2354,
        ];
        try {
            $result = self::$commonService->updateTagTree($params);
            $this->assertFalse($result['hasError']);
//            $this->assertEquals($updatedName, $result['result']['name']);
        } catch (ValidationException $e) {
            $this->fail('ValidationException: '. $e->getErrorsAsString());
        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }

    public function testUpdateTagTreeRequiredParametersError() {
        $params = [];
        try {
            self::$commonService->updateTagTree($params);
        } catch (ValidationException $e) {

            $validation = $e->getErrorsAsArray();
            $this->assertNotEmpty($validation);

            $this->assertArrayHasKey('id', $validation);
            $this->assertEquals('The property id is required', $validation['id'][0]);

            $result = $e->getResult();
            $this->assertEquals(887,$result['code']);

        } catch (PodException $e) {
            $error = $e->getResult();
            $this->fail('PodException: '. $error['message']);
        }
    }
}